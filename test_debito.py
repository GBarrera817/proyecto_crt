# -*- coding: utf-8 -*-
"""test_debito_v3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GPgR-5fb1_GNiZJCPI8Mv738vOfExj28
"""

import pandas as pd 
import numpy as np

#from google.colab import drive
#drive.mount('/content/drive')

DAT_FILES_FOLDER = r'datos/2020/'
BSALE_PATH = r'datos/'

#Bsale
xlsx_bsale = pd.read_excel(BSALE_PATH+'docSearchExport_cc0f2b54bf6e4b085d07fc2bdcdabf5fd73b1843.xlsx', header=11, sheet_name=None)
xlsx_bsale

#Obtengo el nombre de las hojas del excel
xlsx_bsale.keys()

#Obtengo la hoja de nombre específico
df_bsale = xlsx_bsale.get('docSearchExport_cc0f2b54bf6e4b0')
df_bsale

# Obtengo el nombre de las columnas
df_bsale.columns

# Separo el archivo bsale con los datos de Boleta y Factura
df_bsale_bol_fact = df_bsale[(df_bsale['Tipo Documento'] == 'Boleta Electrónica') | (df_bsale['Tipo Documento'] == 'Factura Electrónica')]

df_bsale_bol_fact

df_transbank = pd.read_csv(DAT_FILES_FOLDER+'03_extraccion-masiva-debito-pesos-1-al-29-02-2020(24-11-2020_20.49.15).csv', delimiter=';')
df_transbank

# Rellenamos los campos nulos con un espacio vacío
df_transbank['Nº Boleta'].fillna(" ", inplace=True)

df_transbank.info()

df_transbank.head()

#Determinación fecha
df_bsale_bol_fact['fecha emision'] = pd.to_datetime(df_bsale_bol_fact['Fecha Emision'], format='%Y/%m/%d')

tmp_fecha = []

for fecha in df_transbank['Fecha Venta']:
  fecha_nueva = fecha[:10]
  tmp_fecha.append(fecha_nueva)

df_transbank['fecha_formateada'] = tmp_fecha

# Convertir "Fecha Venta" a datetime
df_transbank['fecha_formateada'] = pd.to_datetime(df_transbank['fecha_formateada'], format='%d/%m/%Y')

# Creamos una columna para saber si 'Fecha Venta' es fin de mes
df_transbank['es_fin_de_mes'] = df_transbank['fecha_formateada'].dt.is_month_end

df_transbank['es_fin_de_mes'][0]

# Cruce de información

boletas = []
trucheo = []

for indice, boleta in zip(df_transbank.index, df_transbank['Nº Boleta']):
  if boleta == ' ': # Si 'N° boleta es vacío
    if not df_transbank['es_fin_de_mes'][indice]: # Si la fila en la que voy es fin de mes
      bol = df_bsale_bol_fact[df_bsale_bol_fact.eq(df_transbank['Código Autorización Venta'][indice]).any(1)]
      if len(bol) == 1:
        bol = bol['Nº Documento'].item()
        boletas.append(bol)
      #No se encontró  
      elif len(bol) == 0:
        bol = "Apocalipsis Zombie!!"
        boletas.append(bol)
      # Hay duplicados
      else:
        bol = "REVISAR: Duplicado o +"
        boletas.append(bol)
        trucheo.append(indice)
    else: # 
        bol = df_bsale_bol_fact[df_bsale_bol_fact.eq(df_transbank['Código Autorización Venta'][indice]).any(1)]
        if len(bol) == 1:
          bol = bol['Nº Documento'].item()
          boletas.append(bol)
        #No se encontró  
        elif len(bol) == 0:
          bol = "Revisar: fin de mes"
          boletas.append(bol)
        # Hay duplicados
        else:
          bol = "Duplicado o +"
          boletas.append(bol)
          trucheo.append(indice)
  else:
    boletas.append(boleta)

df_transbank['boletas_completas'] = boletas

df_transbank.loc[:, ['Código Autorización Venta', 'Nº Boleta', 'boletas_completas']]

df_transbank['boletas_completas'].value_counts()

# TODO
# - Borrar columna N° Boleta -> HECHO
# - Renombrar columna 'boletas_completas' por 'N° Boleta -> HECHO
# GENERAR ARCHIVO DE SALIDA (excel o csv)
# Hacer una GUI para el programa
  # - Identificar archivo bsale
  # - Identificar archivo tbank
  # - Procesar archivo
  # - Mostrar un mini 'reporte'
  # Preguntar donde guardar el archivo de salida

# Renombrar columna
df_transbank.rename(columns={'boletas_completas':'N° Boleta'}, inplace=True)

df_transbank.columns

# Eliminar columna 'Nº Boleta'
df_transbank.drop(columns=['Nº Boleta'])

# Reemplazarla la columna eliminada por 'N° Boleta'

df_transbank = df_transbank.reindex(columns=['Tipo Transacción', 'Fecha Venta', 'Tipo Tarjeta', 'Identificador',
       'Tipo Cuota', 'Monto Original Venta', 'Código Autorización Venta',
       'Nº Cuota', 'Monto Para Abono', 'Comisión e IVA Comisión',
       'Comisión Adicional e IVA Comisión Adicional', 'N° Boleta',
       'Monto Anulación', 'Devolución Comisión e IVA Comisión',
       'Devolución Comisión Adicional e IVA Comisión', 'Monto Retención',
       'Período de Cobro', 'Motivo', 'Detalle de cobros u observación',
       'Monto', 'IVA', 'Fecha Abono', 'Cuenta de Abono', 'Local',
       'Unnamed: 24', 'fecha_formateada', 'es_fin_de_mes'])

df_transbank.head()

# GENERAR ARCHIVO DE SALIDA
df_transbank.to_excel("/content/drive/MyDrive/proyecto_crt/datos/2020/output.xlsx")

################# 
# PROCESO CREDITO

df_credito = pd.read_csv('/content/drive/MyDrive/proyecto_crt/datos/2020/01_extraccion-masiva-credito-pesos-1-al-31-01-2020(24-11-2020_20.49.00).csv', delimiter=';')
df_credito

df_credito['Nº Cuota'].value_counts()

df_credito['Nº Cuota'].isna().value_counts()

